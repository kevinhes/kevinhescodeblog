<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大姐的學習部落格</title>
  
  <subtitle>建築轉職前端的學習日常</subtitle>
  <link href="http://blog.kevinhes.art/atom.xml" rel="self"/>
  
  <link href="http://blog.kevinhes.art/"/>
  <updated>2022-06-24T05:48:31.340Z</updated>
  <id>http://blog.kevinhes.art/</id>
  
  <author>
    <name>kevinhes</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>什麼是 Box Model?</title>
    <link href="http://blog.kevinhes.art/2022/06/24/%E4%BB%80%E9%BA%BC%E6%98%AF-box-model/"/>
    <id>http://blog.kevinhes.art/2022/06/24/%E4%BB%80%E9%BA%BC%E6%98%AF-box-model/</id>
    <published>2022-06-24T05:48:31.000Z</published>
    <updated>2022-06-24T05:48:31.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="box-model-盒模型"><a href="#box-model-盒模型" class="headerlink" title="box model 盒模型"></a>box model 盒模型</h1><p>  box Model 盒模型，是每一個 HTML 標籤都具備的元素，不論是 h1、h2、h3、p、a 以及 div 只要你想得到的我們都可以操作盒模型來達到我們要的排版效果，所以說學習盒模型對於切版來說是十分重要的一環。</p>  <span id="more"></span><h2 id="box-model-的定義"><a href="#box-model-的定義" class="headerlink" title="box model 的定義"></a>box model 的定義</h2><p>  簡單的來說 box Model 由四個部分所組成，分別為 content（內容）、padding（內邊距）、border（邊框）、margin（外邊距），而這四個代表什麼呢？我們先以文字來說明</p><ol><li>content - 內容指的就是我們在網頁上所呈現的東西，比如說文字或是圖面，而盒模型主要會顯示該內容的寬高。</li><li>padding - 那邊距則是指 content 到 border 中間的這段距離，我們可以利用 CSS 屬性 padding 來控制它的大小。 </li><li>border - 邊框就是盒模型的外邊，我們可以設定 border 的線粗、顏色或是出現與否</li><li>margin - 外邊界就是盒模型的最外邊，主要拿來區隔元素與元素之間的距離</li></ol><h2 id="box-model-的示意圖"><a href="#box-model-的示意圖" class="headerlink" title="box model 的示意圖"></a>box model 的示意圖</h2>  <br>  <br>  <img src="https://firebasestorage.googleapis.com/v0/b/bigsisblog-62bed.appspot.com/o/HTML%20%E5%9F%BA%E7%A4%8E%2Fboxmodel.png?alt=media&token=ed352e67-8154-4df2-9e1a-04c2870eaca9">  <br>  <br><h1 id="操作-box-model-的-CSS-屬性"><a href="#操作-box-model-的-CSS-屬性" class="headerlink" title="操作 box model 的 CSS 屬性"></a>操作 box model 的 CSS 屬性</h1><p>  我們可以對組成盒模型的四個部分進行 CSS 屬性的操作，其中 content 內容的部分我們可以使用內容自適應的方式來決定寬高，或是我們也可以直接指定 <code>width</code> 、 <code>height</code> 這兩個屬性來控制 content 的大小。</p><h2 id="Margin"><a href="#Margin" class="headerlink" title="Margin"></a>Margin</h2><p>  Margin 作為外邊距的主要功能就是切版的時候兩個容器中間的間距，因為主要是切版使用的工具，所以是無法指定顏色給他的，如果我們要對 Margin 屬性進行調整的話我們可以看下列範例<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;  <span class="comment">/* 這代表上下左右各推 20px  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  這邊要注意的是當我們下 <code>margin: 20px</code> 這樣的指令的時候，由於並沒有指定方向，所以這會同時給 <code>margin</code> 上下左右各 20px 在畫面上來說的話這個 .box 的寬高就會變成寬 140px 高 240px，之後的 border、pagging 都是一樣的道理。</p><p>  那如果想要針對特定方向，或是水平軸跟垂直軸進行調整呢？我們可以這樣寫<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;    <span class="comment">/* 針對上方 */</span></span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;   <span class="comment">/* 針對左方 */</span></span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;  <span class="comment">/* 針對右方 */</span></span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>; <span class="comment">/* 針對下方 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  如果要調整水平軸或是垂直軸<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>       <span class="comment">/* 垂直軸 */</span></span><br><span class="line">  margin: <span class="number">0</span> <span class="number">20px</span>;    <span class="comment">/* 水平軸 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  我們可以看到垂直跟水平軸只有使用 margin 這個屬性是因為當我們只有輸入兩個數值時系統會判定第一個數字是垂直軸而第二個數字是水平軸，基於這個道理我們也可以在 margin 直接輸入四個數字他就會呈現上、右、下、左，這個道理在 padding 也是相同。<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span> <span class="number">50px</span>       <span class="comment">/* 上 右 下 左 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h2><p>  padding 也可以當作元素跟元素之間的切版工具，只是他的最外圍會有邊框包著，而他的使用方式跟 Margin 都一樣，只是把屬性名都會成 padding 而已，要記得的是 content 如果有使用 background 的CSS 屬性的話（background、background-image） padding 也會有 background 的顏色或是背景圖案</p><h2 id="Border"><a href="#Border" class="headerlink" title="Border"></a>Border</h2><p>  border 就是包在 content 以及 padding 外面的邊框線，會實際上佔據 box-model 上的像素，我們可以利用 border 這個 CSS 屬性來控制 border<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  但其實這個 border 屬性是由其他三個不同屬性組合而我們也可以單獨設定<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: blue;   <span class="comment">/* 邊線顏色 */</span></span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">8px</span>;    <span class="comment">/* 邊界寬度 */</span></span><br><span class="line">  <span class="attribute">border-style</span>: inset;  <span class="comment">/* 邊界形式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>  盒模型是網頁切版極為重要的控制要素，只要控制好就可以簡單切出漂亮的版面。</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p>  <a href="https://www.oxxostudio.tw/articles/202008/css-box-model.html">深入理解 CSS Box Model ( 盒子模型 ) - Oxxo Studio</a><br>  <a href="https://courses.hexschool.com/courses/html/lectures/14726864">Box Model（盒模型）詳細介紹 - 使用 HTML、CSS 開發一個網站</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;box-model-盒模型&quot;&gt;&lt;a href=&quot;#box-model-盒模型&quot; class=&quot;headerlink&quot; title=&quot;box model 盒模型&quot;&gt;&lt;/a&gt;box model 盒模型&lt;/h1&gt;&lt;p&gt;  box Model 盒模型，是每一個 HTML 標籤都具備的元素，不論是 h1、h2、h3、p、a 以及 div 只要你想得到的我們都可以操作盒模型來達到我們要的排版效果，所以說學習盒模型對於切版來說是十分重要的一環。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CSS" scheme="http://blog.kevinhes.art/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>直譯式語言 - JavaScript</title>
    <link href="http://blog.kevinhes.art/2022/06/23/%E7%9B%B4%E8%AD%AF%E5%BC%8F%E8%AA%9E%E8%A8%80-JavaScript/"/>
    <id>http://blog.kevinhes.art/2022/06/23/%E7%9B%B4%E8%AD%AF%E5%BC%8F%E8%AA%9E%E8%A8%80-JavaScript/</id>
    <published>2022-06-23T11:11:32.000Z</published>
    <updated>2022-06-23T11:11:32.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="直譯式語言與編譯式語言"><a href="#直譯式語言與編譯式語言" class="headerlink" title="直譯式語言與編譯式語言"></a>直譯式語言與編譯式語言</h1><p>  我們撰寫的程式碼在電腦運行的時候分成三個步驟</p><ol><li>撰寫原始碼</li><li>生成代碼</li><li>程式運行</li></ol><p>  而直譯式語言以及編譯式語言的差別會發生在步驟二的生成代碼上，我們可以簡單地理解成編譯式語言是一整包原始碼編譯後生成代碼，而直譯式語言則是逐行編譯後生成代碼</p>  <span id="more"></span><h1 id="編譯式語言"><a href="#編譯式語言" class="headerlink" title="編譯式語言"></a>編譯式語言</h1><p>  編譯式語言在生成代碼的過程中，是將全部的原始碼交給編譯器編譯完成後執行，我們可以理解成這個樣子</p><p>  原始碼檔案 &#x3D;&gt; 編譯器 &#x3D;&gt; 代碼檔案 &#x3D;&gt; 執行</p><p>  由於電腦是直接執行代碼檔案，它無需再去判斷任何事情，所以編譯式的語言優點就是執行速度快、節省資源而且可以單獨執行。</p><h1 id="直譯式語言"><a href="#直譯式語言" class="headerlink" title="直譯式語言"></a>直譯式語言</h1><p>  直譯式語言的編譯器方式則是逐行執行，也就是說編譯器會從上到下一次抓一行原始碼編譯後直接執行，基於這一點我們會把直譯式語言的編譯器稱作直譯器，那直譯的過程我們可以理解成這個樣子</p><p>  一行原始碼 &#x3D;&gt; 直譯器 &#x3D;&gt; 一行代碼 &#x3D;&gt; 執行</p><p>  那由於電腦是逐行執行代碼，當然執行速度較慢且消耗電腦資源，但由於是逐行編譯的關係如果某一行出了錯誤程式就會立刻停下報錯，這個特點就帶了了有效率的開發以及較有彈性的開發環境。<br>  另外直譯式語言也無法單獨執行，必須在有直譯器的環境下執行，就網頁前端工程師而言這個環境就是我們的瀏覽器，我們的原始碼是交由我們的瀏覽器去編譯的。</p><h1 id="JavaScript-的編譯流程"><a href="#JavaScript-的編譯流程" class="headerlink" title="JavaScript 的編譯流程"></a>JavaScript 的編譯流程</h1><p>  如果以直譯式語言跟編譯式語言來區分的話，JavaScript 屬於直譯式語言，如果我們將我們的原始碼給瀏覽器編譯的話，他的流程會像是下面這個樣子</p><p>  語法基本單元化 &#x3D;&gt; 抽象結構樹 &#x3D;&gt; 運行</p><p>  接下來我們一個一個步驟來介紹</p><h2 id="語法基本單元化"><a href="#語法基本單元化" class="headerlink" title="語法基本單元化"></a>語法基本單元化</h2><p>  我們以 <code>let a = 1;</code> 來示範，在進入語法基本單元化的時候我們的原始碼會被拆解成一個一個單詞也就是說 <code>let a = 1;</code> 就會變成 <code>let</code> 、 <code>a</code> 、 <code>=</code> 、 <code>1</code> 、 <code>;</code> 、 這五個小單元，此時直譯器還不曉得我們在寫什麼，他只會把這五個單詞歸類並紀錄值，像是 <code>let</code> 屬於 keyword <code>a</code> 則是屬於單字這樣的分類，然後再把這個分類傳給抽象結構樹來解析整句程式碼是什麼意思。</p><h2 id="抽象結構樹"><a href="#抽象結構樹" class="headerlink" title="抽象結構樹"></a>抽象結構樹</h2><p>  進入結構樹之後，直譯器才會開始定義程式碼意義，他會先定義的程式碼的行為 <code>let a = 1;</code> 的話就是宣告變數，然後判斷是用什麼樣的方式宣告（let, var, const），之後再將變數名以及值給填入，帶生成完成後之後再運行。</p><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>  了解 JavaScript 是直譯式語言或許對於 coding 幫助不大，但了解直譯式語言幫助我體諒（？）為什麼程式碼每次都只報錯一條的原因，目前我還沒有接觸過編譯式語言，想必整包跑完一一除錯的心情一定是比差的吧？下一章我們就來理解一下 LHS 以及 RHS 吧！</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p>  <a href="https://courses.hexschool.com/courses/javascript/lectures/11951908">六角學院-JavaScript 核心篇</a><br>  <a href="https://totoroliu.medium.com/%E7%B7%A8%E8%AD%AF%E8%AA%9E%E8%A8%80-vs-%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80-5f34e6bae051">編譯語言 VS 直譯語言</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;直譯式語言與編譯式語言&quot;&gt;&lt;a href=&quot;#直譯式語言與編譯式語言&quot; class=&quot;headerlink&quot; title=&quot;直譯式語言與編譯式語言&quot;&gt;&lt;/a&gt;直譯式語言與編譯式語言&lt;/h1&gt;&lt;p&gt;  我們撰寫的程式碼在電腦運行的時候分成三個步驟&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;撰寫原始碼&lt;/li&gt;
&lt;li&gt;生成代碼&lt;/li&gt;
&lt;li&gt;程式運行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;  而直譯式語言以及編譯式語言的差別會發生在步驟二的生成代碼上，我們可以簡單地理解成編譯式語言是一整包原始碼編譯後生成代碼，而直譯式語言則是逐行編譯後生成代碼&lt;/p&gt;</summary>
    
    
    
    
    <category term="Javascript 核心" scheme="http://blog.kevinhes.art/tags/Javascript-%E6%A0%B8%E5%BF%83/"/>
    
    <category term="Javascript" scheme="http://blog.kevinhes.art/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Mixin + Content 響應式網頁的必殺技</title>
    <link href="http://blog.kevinhes.art/2022/06/21/Mixin-Content-%E9%9F%BF%E6%87%89%E5%BC%8F%E7%B6%B2%E9%A0%81%E7%9A%84%E5%BF%85%E6%AE%BA%E6%8A%80/"/>
    <id>http://blog.kevinhes.art/2022/06/21/Mixin-Content-%E9%9F%BF%E6%87%89%E5%BC%8F%E7%B6%B2%E9%A0%81%E7%9A%84%E5%BF%85%E6%AE%BA%E6%8A%80/</id>
    <published>2022-06-21T01:40:40.000Z</published>
    <updated>2022-06-21T01:40:40.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mixin-Media-的組合"><a href="#Mixin-Media-的組合" class="headerlink" title="Mixin + Media 的組合"></a>Mixin + Media 的組合</h1><p>  在這人人一支手機的年代響應式網頁的設計是前端工程師的必備技能，而 <code>@media</code> 在響應式網頁更是會一直不停重複出現的語法，咦？重複出現，對於重複出現的程式碼我們在上一章不是學了一個很好用的語法 <code>@mixin</code> 嗎？可不可以把 <code>@media</code> 的做成 <code>@mixin</code> 已供未來使用？當然可以，讓我們看看程式碼要怎麼寫</p>  <span id="more"></span>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> media-breakpoint-up-tablet &#123;</span><br><span class="line">  <span class="keyword">@media</span>(<span class="attribute">min-width</span>:<span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">  <span class="keyword">@include</span> media-breakpoint-up-tablet</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  編譯出來之後就會變成這個樣子<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  但你一定會想說這不合理啊，這樣我也是要為了每一個 CSS 選擇器去撰寫，並沒有省到多少程式碼而且有一種脫褲子放屁的感覺，這個時候就要來介紹 <code>@content</code> 的用法了</p><h1 id="Mixin-Media-content-的組合"><a href="#Mixin-Media-content-的組合" class="headerlink" title="Mixin + Media + content 的組合"></a>Mixin + Media + content 的組合</h1><p>  <code>@content</code> 功能就是讓我們在使用 <code>@include</code> 的時候還可以繼續填入需要的 CSS 屬性，以上一節的程式碼為例，我們就可以把 <code>@media</code> 的大括號裏面加上 <code>@content</code> 這樣我們在撰寫響應式的時候就不用再客制，直接寫入我們要的就可以，讓我們看看程式碼怎麼寫<br>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> media-breakpoint-up-tablet &#123;</span><br><span class="line">  <span class="keyword">@media</span>(<span class="attribute">min-width</span>:<span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="keyword">@content</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">  <span class="keyword">@include</span> media-breakpoint-up-tablet &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  編譯的結果會跟原本的相同，之後我們只要在每個專案開始前把每個斷點的 <code>@mixin</code> 給設定好就萬事亨通了，但想必就會有朋友覺得說這樣我會需要手機、平板、電腦、大螢幕電腦四種不同的 <code>@mixin</code> 難道沒有更少程式碼的方式嗎？</p><h1 id="Mixin-Media-content-參數-的組合"><a href="#Mixin-Media-content-參數-的組合" class="headerlink" title="Mixin + Media + content + 參數 的組合"></a>Mixin + Media + content + 參數 的組合</h1><p>  還記得 <code>@Mixin</code> 可以帶入參數嗎？我們也可以使用變數來帶入各個不同的斷點，來讓我們的程式碼變得更少，只要我們先設定好斷點的變數，再把 <code>@Mixin</code> 參數設定好就可以使用更好且更少的方式來管理響應式網站。<br>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$md</span>: <span class="number">768px</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> media-breakpoint-up(<span class="variable">$size</span>) &#123;</span><br><span class="line">  <span class="keyword">@media</span>(<span class="attribute">min-width</span>:<span class="variable">$md</span>) &#123;</span><br><span class="line">    <span class="keyword">@content</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">  <span class="keyword">@include</span> media-breakpoint-up (<span class="variable">$md</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  這樣子編譯的結果也會相同，但是我們的 <code>@mixin</code> 就只需要一條，而且也只要把想要的斷點預先設計成變數，就可以快速帶入，讓我們的響應式網站更加的易於管理。</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p>  <a href="https://courses.hexschool.com/courses/enrolled/670032">六角學院-Sass 實戰全攻略 - 成為前 1% 的 CSS 頂尖好手</a><br>  <a href="https://awdr74100.github.io/2020-05-30-scss-mixin-include/">Sass &#x2F; SCSS 預處理器 - @mixin 建立混入與 @include 載入混入</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Mixin-Media-的組合&quot;&gt;&lt;a href=&quot;#Mixin-Media-的組合&quot; class=&quot;headerlink&quot; title=&quot;Mixin + Media 的組合&quot;&gt;&lt;/a&gt;Mixin + Media 的組合&lt;/h1&gt;&lt;p&gt;  在這人人一支手機的年代響應式網頁的設計是前端工程師的必備技能，而 &lt;code&gt;@media&lt;/code&gt; 在響應式網頁更是會一直不停重複出現的語法，咦？重複出現，對於重複出現的程式碼我們在上一章不是學了一個很好用的語法 &lt;code&gt;@mixin&lt;/code&gt; 嗎？可不可以把 &lt;code&gt;@media&lt;/code&gt; 的做成 &lt;code&gt;@mixin&lt;/code&gt; 已供未來使用？當然可以，讓我們看看程式碼要怎麼寫&lt;/p&gt;</summary>
    
    
    
    
    <category term="Sass" scheme="http://blog.kevinhes.art/tags/Sass/"/>
    
    <category term="CSS" scheme="http://blog.kevinhes.art/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap 的 navbar</title>
    <link href="http://blog.kevinhes.art/2022/06/13/bootstrap-%E7%9A%84-navbar/"/>
    <id>http://blog.kevinhes.art/2022/06/13/bootstrap-%E7%9A%84-navbar/</id>
    <published>2022-06-13T13:44:30.000Z</published>
    <updated>2022-06-15T04:05:10.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Navbar-基本-Html-標籤（以-bootstrap-為範例）"><a href="#Navbar-基本-Html-標籤（以-bootstrap-為範例）" class="headerlink" title="Navbar 基本 Html 標籤（以 bootstrap 為範例）"></a>Navbar 基本 Html 標籤（以 bootstrap 為範例）</h1><p>  通常一個網站都會有一個導覽列，這個導覽列可以連結到網站所有的內容，或是快速地回到首頁，所以導覽列會包含網站的 Logo （可以直接連回首頁）以及網頁內容的連結，算是一個非常常見的網站元件。</p><p>  那 Bootstrap 作為一個十分便利的前端開發工具，也有把導覽列作為一個元件，方便工程師快速使用，但是由於 Bootstrap 套疊了很多不同的選擇器，有時候常常會改不動程式碼，難以無法調整成想要的樣子，所以如果要順利修改的話可能就需要 Sass 的進階知識。</p><p>  那今天我想以 Bootstrap 的 Navbar 為例，來看看要如何改動  Bootstrap 的程式碼，我們可以看一下  Bootstrap 的 Navbar 給的範例程式碼。</p>  <span id="more"></span>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-expand-lg navbar-light bg-light&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- logo  --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Navbar<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- RWD 的按鈕 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggler&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#navbarSupportedContent&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;navbarSupportedContent&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Toggle navigation&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggler-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- menu list --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;navbarSupportedContent&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;navbar-nav me-auto mb-2 mb-lg-0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link active&quot;</span> <span class="attr">aria-current</span>=<span class="string">&quot;page&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item dropdown&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link dropdown-toggle&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;navbarDropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            Dropdown</span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;navbarDropdown&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link disabled&quot;</span>&gt;</span>Disabled<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  我們可以從最外層看起<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-expand-lg navbar-light bg-light&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li><code>.navbar</code><br>  這個 class 選擇器主要是包含 flex 屬性的設定以及使用子組合器去指定 <code>.container</code> <code>.container-fluid</code> 這兩個 class 的 css 屬性。</li><li><code>.navbar-expand-lg</code><br>  這是標示 Navbar 會在哪一個斷點將 menu list 顯示出來，範例中的 lg 就是表示在 992px 的時候會展開，如果要改成在平板就顯示出來的話可以改成 md ，這個 class 選擇器 還有包含像是 nav-link 的 padding 值，如果覺得怎麼改不動可以來這裡看看。</li></ul><p>  接下來內層同一層分了三個區塊我們來看第一個區塊<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Navbar<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li><code>.navbar-brand</code><br>  brand 顧名思義就是品牌的意思，所以會將網站標題又或者是 logo 放在這，這個選擇器裡面的內容很容易懂，就是字體、padding、margin等等的，也可以把 rebot 裏面的 a:hover 的顏色用權重給改掉，但是要記住他原本是沒有 RWD 的如果 logo 有需要 RWD 的話可以在這裡增加。</li></ul>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggler&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-bs-toggle</span>=<span class="string">&quot;collapse&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-bs-target</span>=<span class="string">&quot;#navbarSupportedContent&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">aria-controls</span>=<span class="string">&quot;navbarSupportedContent&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Toggle navigation&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggler-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>.navbar-toggler</code><br>  這個是進入平板或是手機版型時候的按鈕樣式，這個 <code>button</code> 的標籤主要還是在後面的 data 屬性上，之後有聊到 RWD 的選單時再來詳細說明。</li></ul>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;navbarSupportedContent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;navbar-nav me-auto mb-2 mb-lg-0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link active&quot;</span> <span class="attr">aria-current</span>=<span class="string">&quot;page&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item dropdown&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link dropdown-toggle&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;navbarDropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        Dropdown</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;navbarDropdown&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link disabled&quot;</span>&gt;</span>Disabled<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>.collapse</code><br>  這個是折疊選單的功能，基本的內容就是 <code>display: none</code> 不顯示，有趣的我們可以看到裡面有一個 <code>:not</code> 選擇器，也就是說當我們用 JavaScript 為這個 div 標籤加上 show 的時候，他就會排除掉原本的  <code>display: none</code> 使選單列選事出來。</li><li><code>.navbar-nav</code><br>  設定關於 flex 屬性的地方</li><li><code>.navbar-link</code><br>  padding 以及 字型大小設定的地方</li><li><code>.dropdown</code><br>  下拉式選單的選擇器，之後再詳細介紹</li></ul><h1 id="需要載入的-Bootstarp-元件"><a href="#需要載入的-Bootstarp-元件" class="headerlink" title="需要載入的 Bootstarp 元件"></a>需要載入的 Bootstarp 元件</h1><p>  如果我們只想要用 navbar 這個元件的話，我們可以只單獨載入部分的 bootstrap 元件，除了<a href="https://bootstrap5.hexschool.com/docs/5.1/customize/sass/">官網</a>要求的必要檔案之外，我們只要載入下方的元件以及 bootstrap 的 JavaScript 就可以正常啟用。<br>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../../../../node_modules/bootstrap/scss/nav&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../../../../node_modules/bootstrap/scss/navbar&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../../../../node_modules/bootstrap/scss/dropdown&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../../../../node_modules/bootstrap/scss/transitions&quot;</span>;</span><br></pre></td></tr></table></figure></p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p>  <a href="https://bootstrap5.hexschool.com/docs/5.1/components/navbar/">導覽列 (Navbar)</a><br>  <a href="https://courses.hexschool.com/courses/enrolled/1542216">Bootstrap 5 網頁切版整合術</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Navbar-基本-Html-標籤（以-bootstrap-為範例）&quot;&gt;&lt;a href=&quot;#Navbar-基本-Html-標籤（以-bootstrap-為範例）&quot; class=&quot;headerlink&quot; title=&quot;Navbar 基本 Html 標籤（以 bootstrap 為範例）&quot;&gt;&lt;/a&gt;Navbar 基本 Html 標籤（以 bootstrap 為範例）&lt;/h1&gt;&lt;p&gt;  通常一個網站都會有一個導覽列，這個導覽列可以連結到網站所有的內容，或是快速地回到首頁，所以導覽列會包含網站的 Logo （可以直接連回首頁）以及網頁內容的連結，算是一個非常常見的網站元件。&lt;/p&gt;
&lt;p&gt;  那 Bootstrap 作為一個十分便利的前端開發工具，也有把導覽列作為一個元件，方便工程師快速使用，但是由於 Bootstrap 套疊了很多不同的選擇器，有時候常常會改不動程式碼，難以無法調整成想要的樣子，所以如果要順利修改的話可能就需要 Sass 的進階知識。&lt;/p&gt;
&lt;p&gt;  那今天我想以 Bootstrap 的 Navbar 為例，來看看要如何改動  Bootstrap 的程式碼，我們可以看一下  Bootstrap 的 Navbar 給的範例程式碼。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Sass" scheme="http://blog.kevinhes.art/tags/Sass/"/>
    
    <category term="bootstrap" scheme="http://blog.kevinhes.art/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Sass Mixin 你的第二技術文件大腦</title>
    <link href="http://blog.kevinhes.art/2022/06/13/Sass-Mixin-%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%BA%8C%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6%E5%A4%A7%E8%85%A6/"/>
    <id>http://blog.kevinhes.art/2022/06/13/Sass-Mixin-%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%BA%8C%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6%E5%A4%A7%E8%85%A6/</id>
    <published>2022-06-13T02:28:04.000Z</published>
    <updated>2022-06-20T07:00:28.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sass-的-Mixin-Include-語法"><a href="#Sass-的-Mixin-Include-語法" class="headerlink" title="Sass 的 Mixin Include 語法"></a>Sass 的 Mixin Include 語法</h1><p>  切版技術百百種，不知道各位有沒有過想要特定技術卻想不起來怎麼設定 CSS 屬性的時候？像我每次要寫漢堡選單的時候都要再 google 一下才會想起來，這個過程非常的讓工作效率降低，也讓個人的專業度打了七折有，為了不讓這事情發生 Sass 設計了一個貼心的功能，也就是 Mixin 混合與 include 載入，我們可以利用 Mixin 儲存我們常用的 CSS 屬性並用 Include 載入，比如說漢堡選單就可以利用這的方式儲存<br>  <span id="more"></span></p><h1 id="如何使用-Mixin-amp-Include"><a href="#如何使用-Mixin-amp-Include" class="headerlink" title="如何使用 Mixin &amp; Include"></a>如何使用 Mixin &amp; Include</h1><p>  Mixin 分成兩個部分，一個是 Mixin 的命名以及要帶入的 CSS 屬性我們可以在 Sass 檔裡面這樣寫<br>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> title-style &#123; <span class="comment">// mixin 名稱</span></span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line"><span class="comment">// 在大括號裡面寫入要儲存的 CSS 屬性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  現在我們已經將這 title-style 的 Mixin 給儲存好了，現在就可以利用 Include 的方式把 CSS 屬性給載入進去，我們只要像下面這樣寫<br>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> title-style</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  編譯後的 CSS 就會像是這樣<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  使用上就是這麼簡單，那一個工程師的 Mixin 的儲存量也某種程度反映了他所經手的網頁多寡是一個可以拿來顯示工程師經驗的知識庫。</p><h1 id="Mixin-帶入參數"><a href="#Mixin-帶入參數" class="headerlink" title="Mixin 帶入參數"></a>Mixin 帶入參數</h1><p>  以上面的程式碼為例， title-style 如果作為控制文字的 CSS 屬性，那像是字體大小、粗細體或是顏色應該是要依網站不同而修改，那這樣的話上面的程式碼就彈性不足變得無法每個網站都適用，那該怎麼辦？沒關係 Sass 都已經幫你想好了，上面有提到你可以把 Mixin 看成一個函式，函式可以幹嘛？可以帶參數啊，那我們來修改一下上面的程式碼<br>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> title-style(<span class="variable">$size</span>, <span class="variable">$weight</span>, <span class="variable">$color</span>) &#123;</span><br><span class="line">  <span class="comment">// 在 Mixin 名稱後面加上小括號，參數記得要加上 $</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$size</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="variable">$weight</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="comment">// 把參數帶到 CSS 屬性的值內</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> title-style(<span class="number">80px</span>, bold, red)</span><br><span class="line">&#125;</span><br><span class="line">// 最後在使用 include 的時候再把我們要的值給帶入</span><br></pre></td></tr></table></figure><br>  這樣我們就擁有具有彈性的 Mixin 了，當然 Mixin 還不只如此，我們還可以用它來設計斷點，這些我們留到下一章再來說明。</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p>  <a href="https://courses.hexschool.com/courses/enrolled/670032">六角學院-Sass 實戰全攻略 - 成為前 1% 的 CSS 頂尖好手</a><br>  <a href="https://awdr74100.github.io/2020-05-30-scss-mixin-include/">Sass &#x2F; SCSS 預處理器 - @mixin 建立混入與 @include 載入混入</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Sass-的-Mixin-Include-語法&quot;&gt;&lt;a href=&quot;#Sass-的-Mixin-Include-語法&quot; class=&quot;headerlink&quot; title=&quot;Sass 的 Mixin Include 語法&quot;&gt;&lt;/a&gt;Sass 的 Mixin Include 語法&lt;/h1&gt;&lt;p&gt;  切版技術百百種，不知道各位有沒有過想要特定技術卻想不起來怎麼設定 CSS 屬性的時候？像我每次要寫漢堡選單的時候都要再 google 一下才會想起來，這個過程非常的讓工作效率降低，也讓個人的專業度打了七折有，為了不讓這事情發生 Sass 設計了一個貼心的功能，也就是 Mixin 混合與 include 載入，我們可以利用 Mixin 儲存我們常用的 CSS 屬性並用 Include 載入，比如說漢堡選單就可以利用這的方式儲存&lt;br&gt;</summary>
    
    
    
    
    <category term="Sass" scheme="http://blog.kevinhes.art/tags/Sass/"/>
    
    <category term="CSS" scheme="http://blog.kevinhes.art/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Sass 的模組化管理</title>
    <link href="http://blog.kevinhes.art/2022/06/12/Sass-%E7%9A%84%E6%A8%A1%E7%B5%84%E5%8C%96%E7%AE%A1%E7%90%86/"/>
    <id>http://blog.kevinhes.art/2022/06/12/Sass-%E7%9A%84%E6%A8%A1%E7%B5%84%E5%8C%96%E7%AE%A1%E7%90%86/</id>
    <published>2022-06-12T03:01:28.000Z</published>
    <updated>2022-06-12T05:04:16.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="為什麼需要模組化？"><a href="#為什麼需要模組化？" class="headerlink" title="為什麼需要模組化？"></a>為什麼需要模組化？</h1><p>  試想如果每一次開啟一個新專案都必須要重零開始那是多麼累人的一件事情？尤其人類的大腦並不適合記憶比較適合思考，當我們遇到程式設計中重複的技術問題時，如果要使用的時候都必須回想，工作流程上一直被打斷那效率自然就不好，這個時候如果我們把這些使用上重複率很高的程式碼獨立成各個不同的檔案，當這個技術有需要的時候再載入的話，就可以免去回憶的這個步驟，加快我們的工作效率，而這個行為就是模組化</p>  <span id="more"></span><h1 id="在-Sass-中的模組化"><a href="#在-Sass-中的模組化" class="headerlink" title="在 Sass 中的模組化"></a>在 Sass 中的模組化</h1><p>  而在 Sass 中我們可以利用 <code>@import</code> 的方法將檔案合併，首先我們要有一個將模組化好的檔案匯入的地方，通常會取名為 <code>all.scss</code> 或是 <code>main.scss</code> ， <code>@import</code> 這個方法就會用這這個檔案裡面，我們可以先看一下範例程式碼，看一下是怎麼使用的</p>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./vendor/bootstrap&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./base/base&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./layout/header&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./layout/layout&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./utili/helpers/helpers&#x27;</span></span><br></pre></td></tr></table></figure><p>  我們可以使用相對路徑或是絕對路徑去指定模組化檔案的位置，Sass 會去尋找之後編譯，最會只會呈現一個  <code>all.css</code> 或是 <code>main.css</code> 檔案，我們只要在 html 檔去連結 CSS 檔就可以正確地顯示樣式</p><h1 id="如何模組化檔案"><a href="#如何模組化檔案" class="headerlink" title="如何模組化檔案"></a>如何模組化檔案</h1><p>  在 Sass 裏面我們可以把想要模組化的檔案前面加上 <code>_</code> 這個符號，比如說像 CSS reset 的部分我們很常使用，所以把 reset 的程式碼模組化就會是個不錯的選擇，那我的習慣會將該程式碼放在一個 <code>reset.scss</code> 的檔案裡面，然後在前面加上 <code>_</code> 變成 <code>_reset.scss</code> Sass 就會把它看成一個模組單元，之後我們就可以在 <code>all.scss</code> 立面用 <code>@import</code> 匯入，資料節內結構如下。<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|- scss</span><br><span class="line">    |</span><br><span class="line">    |- _resest.scss</span><br><span class="line">    |- main.scss</span><br></pre></td></tr></table></figure><br>  模組化是 Sass 一個非常重要的功能，之後各種不同的設計模式有了模組化的功能之後，不論是邏輯上，或是使用上都非常的易於使用及理解。</p><h1 id="常見錯誤"><a href="#常見錯誤" class="headerlink" title="常見錯誤"></a>常見錯誤</h1><p>  因為我們把程式碼拆開了，所以無法一目瞭然的看到每行程式碼的順序，有時候搞混程式碼的順序，最常會遇到的就是變數在宣告之前使用，或是後面的程式碼權重無法壓過前面的權重，所以在規劃的時候要注意順序。</p><p>  另外 <code>@import</code> 跟變數一樣後面要記得加上分號，如果沒有也會造成編譯錯誤。</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p>  <a href="https://courses.hexschool.com/courses/enrolled/670032">六角學院-Sass 實戰全攻略 - 成為前 1% 的 CSS 頂尖好手</a><br>  <a href="https://awdr74100.github.io/2020-05-25-scss-variables/">Sass &#x2F; SCSS 預處理器 - Variables 變數宣告與 !global、!default 標誌定義</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;為什麼需要模組化？&quot;&gt;&lt;a href=&quot;#為什麼需要模組化？&quot; class=&quot;headerlink&quot; title=&quot;為什麼需要模組化？&quot;&gt;&lt;/a&gt;為什麼需要模組化？&lt;/h1&gt;&lt;p&gt;  試想如果每一次開啟一個新專案都必須要重零開始那是多麼累人的一件事情？尤其人類的大腦並不適合記憶比較適合思考，當我們遇到程式設計中重複的技術問題時，如果要使用的時候都必須回想，工作流程上一直被打斷那效率自然就不好，這個時候如果我們把這些使用上重複率很高的程式碼獨立成各個不同的檔案，當這個技術有需要的時候再載入的話，就可以免去回憶的這個步驟，加快我們的工作效率，而這個行為就是模組化&lt;/p&gt;</summary>
    
    
    
    
    <category term="Sass" scheme="http://blog.kevinhes.art/tags/Sass/"/>
    
    <category term="CSS" scheme="http://blog.kevinhes.art/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Sass變數 - List、Map</title>
    <link href="http://blog.kevinhes.art/2022/06/11/Sass%E8%AE%8A%E6%95%B8-List%EF%BC%8CMap/"/>
    <id>http://blog.kevinhes.art/2022/06/11/Sass%E8%AE%8A%E6%95%B8-List%EF%BC%8CMap/</id>
    <published>2022-06-11T02:50:50.000Z</published>
    <updated>2022-06-11T06:57:27.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="進階的變數類型"><a href="#進階的變數類型" class="headerlink" title="進階的變數類型"></a>進階的變數類型</h1><p>  上一章我們介紹了什麼是變數以及基礎的變數類型，那今天我們就來介紹稍微進階的 Map 以及 List。</p><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><p>  我們可以把 List 這個變數類型看成 JavaScript 的陣列，就是宣告的變數裡面存放了複數的值，不同的是 List 不需要用逗點隔開，只要使用空白 Sass 也可以編譯，我們來看看程式碼怎麼寫</p>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$colors</span>: red blue purple gray;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line"><span class="attribute">color</span>:nth(<span class="variable">$colors</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  跟 JavaScript 的陣列不同的是 Sass 的 List 第一個不是從 0 開始計算而是從 1 開始算，而範例程式碼內的 nth 是 List 的讀取方式，代表的是我要讀取第三個 List 數值。</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  最後編譯的結果就是讀取了第三個值 purple 並讓 h1 變成了紫色</p>  <span id="more"></span><h1 id="其他的-List-方法"><a href="#其他的-List-方法" class="headerlink" title="其他的 List 方法"></a>其他的 List 方法</h1><p>  如同 JavaScript 的陣列有很多不同的方法，比如說移除、新增等等的在 List 裏面都可以做到，只是目前我還沒有遇到需要使用這些方法的時候，但我們先學起來以後真的遇到了才不會手忙腳亂</p><p>  List 還有以下這些方法</p><ul><li>append - 在 List 的最後的位置加上值</li><li>join - 把兩個 List 結合</li><li>length - 查詢 List 的長度</li><li>set-nth - 修改指定位置的值</li></ul><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>  Map 我們可以看成 JavaScript 的物件型別，也就是說我們可以在內部儲存複數的 Key 值以及 Value 值，而 Map 就跟物件一樣都要使用逗號隔開（最後一個可以不用），我們可以來看看 Map 怎麼撰寫</p>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$colors</span>:(</span><br><span class="line">  primary: red,</span><br><span class="line">  second: blue,</span><br><span class="line">  info: green</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: map-get(<span class="variable">$colors</span>, info)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  首先我們可以看到 Map 是用小括號包起來的，在小括號裏面就是 Map 的內容，而存放在裡面的 key 是不用再加上 $ 字號，這跟 JavaScript 一樣物件內部不用使用 let 、 const 來宣告，而編譯結果就是</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="map-方法"><a href="#map-方法" class="headerlink" title="map 方法"></a>map 方法</h1><p>  在上一節的範例程式碼中我們可以看到如果要讀取 Map 的資訊的話要使用 <code>map-get</code> 的方法，使用上很容易就是 <code>map-get($變數, key值)</code> 來使用，那我們來看看其他的 Map 方法</p><ul><li>map-merge($map1, $map2) - 合併兩個 Map</li><li>map-remove($map, $key) - 移除指定位置的 key</li><li>map-keys($map) - 取出所有的 key 值</li><li>map-values($map) - 取出所有的 value 值</li></ul><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p>  <a href="https://courses.hexschool.com/courses/enrolled/670032">六角學院-Sass 實戰全攻略 - 成為前 1% 的 CSS 頂尖好手</a><br>  <a href="https://ithelp.ithome.com.tw/articles/10161389">Sass教學 (40) - 使用Sass Maps提升程式可讀、變數群組性</a><br>  <a href="https://awdr74100.github.io/2020-05-25-scss-variables/">Sass &#x2F; SCSS 預處理器 - Variables 變數宣告與 !global、!default 標誌定義</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;進階的變數類型&quot;&gt;&lt;a href=&quot;#進階的變數類型&quot; class=&quot;headerlink&quot; title=&quot;進階的變數類型&quot;&gt;&lt;/a&gt;進階的變數類型&lt;/h1&gt;&lt;p&gt;  上一章我們介紹了什麼是變數以及基礎的變數類型，那今天我們就來介紹稍微進階的 Map 以及 List。&lt;/p&gt;
&lt;h1 id=&quot;List&quot;&gt;&lt;a href=&quot;#List&quot; class=&quot;headerlink&quot; title=&quot;List&quot;&gt;&lt;/a&gt;List&lt;/h1&gt;&lt;p&gt;  我們可以把 List 這個變數類型看成 JavaScript 的陣列，就是宣告的變數裡面存放了複數的值，不同的是 List 不需要用逗點隔開，只要使用空白 Sass 也可以編譯，我們來看看程式碼怎麼寫&lt;/p&gt;
  &lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$colors&lt;/span&gt;: red blue purple gray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:nth(&lt;span class=&quot;variable&quot;&gt;$colors&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  跟 JavaScript 的陣列不同的是 Sass 的 List 第一個不是從 0 開始計算而是從 1 開始算，而範例程式碼內的 nth 是 List 的讀取方式，代表的是我要讀取第三個 List 數值。&lt;/p&gt;
  &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: purple;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;  最後編譯的結果就是讀取了第三個值 purple 並讓 h1 變成了紫色&lt;/p&gt;</summary>
    
    
    
    
    <category term="Sass" scheme="http://blog.kevinhes.art/tags/Sass/"/>
    
    <category term="CSS" scheme="http://blog.kevinhes.art/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>關於 Sass 變數的作用域（!global，!default）</title>
    <link href="http://blog.kevinhes.art/2022/06/10/%E9%97%9C%E6%96%BC-Sass-%E8%AE%8A%E6%95%B8%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://blog.kevinhes.art/2022/06/10/%E9%97%9C%E6%96%BC-Sass-%E8%AE%8A%E6%95%B8%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
    <published>2022-06-10T04:17:42.000Z</published>
    <updated>2022-06-10T13:31:19.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="那個先來後到的問題"><a href="#那個先來後到的問題" class="headerlink" title="那個先來後到的問題"></a>那個先來後到的問題</h1><p>  在上一篇的 Sass 常見錯誤中有提到 Sass 的編譯方式是由上到下進行編譯，所以如果在變數宣告之前就調用變數的話就會造成編譯錯誤，那如果在已經宣告的變數之後重複宣告會發生什麼事情呢？我們可以用程式碼來編譯看看</p>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$primary</span>: red;</span><br><span class="line"><span class="variable">$primary</span>: purple;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$primary</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  編譯結果就會變成這樣</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  我們可以看到 <code>$primary</code> 變數變成了紫色，意思就是說如果重複宣告變數的話後面的變數的值是會修改前面的變數內容的。</p>  <span id="more"></span><h1 id="替變數加入權重的概念-default"><a href="#替變數加入權重的概念-default" class="headerlink" title="替變數加入權重的概念 !default"></a>替變數加入權重的概念 !default</h1><p>  上一節提到了 Sass 變數覆蓋的問題，現在我們來學怎麼為變數加上預設值，當我們在變數後面加上了 <code>!default</code> 的時候此變數的賦值就會變成預設值，在權重上來說它就變成了最低的權重，覆蓋他變得十分容易，也無需在意前後問題，我們看看上一節的範例程式碼如果我們在第二次宣告的變數上加上 <code>!default</code> 會怎麼樣？ </p>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$primary</span>: red;</span><br><span class="line"><span class="variable">$primary</span>: purple !default;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$primary</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  編譯結果就會變成這樣</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  我們可以發現顏色依舊是紅色，這是因為第二次宣告的 <code>$primary</code> 是預設值當編譯到此行時，因為 red 的權重比較重，所以第二次宣告就不理他了。</p><h1 id="變數作用域"><a href="#變數作用域" class="headerlink" title="變數作用域"></a>變數作用域</h1><p>  目前我們所有的範例變數的位置都是放在全域下，所以說不管我們在拿裡讀取都可以讀取得到，但如果我們想要的特定選擇器裏面有自己的變數，而不被其他選擇器讀取或是被覆蓋的話，我們就可以把變數放在區域裡面也就是選擇器後面的 {} 內，我們來看看範例程式碼</p>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$primary</span>: red;</span><br><span class="line"><span class="variable">$primary</span>: blue;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="variable">$primary</span>: purple;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$primary</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="variable">$primary</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  編譯下來的話是這個樣子</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  我們可以看到 h2 變成了藍色，而不是 h1 標籤選擇器裡面的紫色，我們可以這樣來利用區域內的變數而不被外部污染，但如果你有需求（我寫的 code 太少無法舉例），也可以在 {} 內部的變數後面加上 <code>!global</code> 這條程式碼，這樣 Sass 在編輯的時候，就會把加了 <code>!global</code> 的程式碼當作是全域變數，我們來看看如果我們在上面的程式碼加上  <code>!global</code> 或有什麼效果</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  最後 h2 也變成了紫色，這就是  <code>!global</code> 的用法。</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p>  <a href="https://courses.hexschool.com/courses/enrolled/670032">六角學院-Sass 實戰全攻略 - 成為前 1% 的 CSS 頂尖好手</a><br>  <a href="https://awdr74100.github.io/2020-05-25-scss-variables/">Sass &#x2F; SCSS 預處理器 - Variables 變數宣告與 !global、!default 標誌定義</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;那個先來後到的問題&quot;&gt;&lt;a href=&quot;#那個先來後到的問題&quot; class=&quot;headerlink&quot; title=&quot;那個先來後到的問題&quot;&gt;&lt;/a&gt;那個先來後到的問題&lt;/h1&gt;&lt;p&gt;  在上一篇的 Sass 常見錯誤中有提到 Sass 的編譯方式是由上到下進行編譯，所以如果在變數宣告之前就調用變數的話就會造成編譯錯誤，那如果在已經宣告的變數之後重複宣告會發生什麼事情呢？我們可以用程式碼來編譯看看&lt;/p&gt;
  &lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$primary&lt;/span&gt;: red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$primary&lt;/span&gt;: purple;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;variable&quot;&gt;$primary&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;  編譯結果就會變成這樣&lt;/p&gt;
  &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: purple;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;  我們可以看到 &lt;code&gt;$primary&lt;/code&gt; 變數變成了紫色，意思就是說如果重複宣告變數的話後面的變數的值是會修改前面的變數內容的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Sass" scheme="http://blog.kevinhes.art/tags/Sass/"/>
    
    <category term="CSS" scheme="http://blog.kevinhes.art/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Sass 的變數</title>
    <link href="http://blog.kevinhes.art/2022/06/09/Sass-%E8%AE%8A%E6%95%B8%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.kevinhes.art/2022/06/09/Sass-%E8%AE%8A%E6%95%B8%E4%BD%BF%E7%94%A8/</id>
    <published>2022-06-09T06:46:30.000Z</published>
    <updated>2022-06-10T04:15:50.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="變數是什麼？"><a href="#變數是什麼？" class="headerlink" title="變數是什麼？"></a>變數是什麼？</h1><p>  比如說我們今天要賣麵包，然後一個麵包麵包 20 塊在現實世界我們可以用人腦進行計算，一個 20 兩個 40 ，十五個 300 塊，但是今天如果進入了數位的世界我們想要請電腦計算麵包的價格，難道我們要一次一次的打方程式嗎？ 1 * 20 ， 2 * 20 ， 15 * 20 ? 假設未來通貨膨脹麵包一個 25 塊怎麼辦？我們又要一次一次的計算嗎？這不符合工程師的性格，我們需要電腦儲存資訊讓我們重複利用且未來可以進行修改，而這個功能就是變數  </p>  <span id="more"></span><h1 id="SassScript-的變數"><a href="#SassScript-的變數" class="headerlink" title="SassScript 的變數"></a>SassScript 的變數</h1><h2 id="SassScript-的用法"><a href="#SassScript-的用法" class="headerlink" title="SassScript 的用法"></a>SassScript 的用法</h2><p>  Sass 的變數可以使用 $ 字號進行宣告，而儲存的資料類別可以是下列這幾種</p><ul><li>數值</li><li>字串</li><li>顏色</li><li>列表</li><li>地圖（類似 JavaScript 的物件）</li><li>布林</li><li>空值</li><li>函式</li></ul><p>  實際上在 Sass 宣告的範例程式碼如下（以顏色為範例）</p>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$primary</span>: red</span><br></pre></td></tr></table></figure><p>  這樣我們就可以在不同的地方去讀取這個變數</p>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$primary</span>: red;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">a</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="variable">$primary</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$primary</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  編譯成 CSS 的程式碼如下</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  我們可以看到 <code>$primary</code> 都被換成 <code>red</code> 這個顏色了，這就是代表 Sass 讀取了 <code>$primary</code> 這個變數並在使用這個變數的地方帶入了 <code>$primary</code> 被賦予的值，也就是 <code>red</code> 這個顏色，而之後如果網站整體的風格顏色需要改變的話，我們也只需要修改 <code>$primary</code> 這個變數的值就好，所以說在 Sass 裏面使用用變數可以大幅得增加程式碼的複用性以及可修改性，之後就不用在 control + f 一個一個去調整顏色了</p><h2 id="使用-SassScript-的常見錯誤"><a href="#使用-SassScript-的常見錯誤" class="headerlink" title="使用 SassScript 的常見錯誤"></a>使用 SassScript 的常見錯誤</h2><p>  由於 SassScript 已經是一種程式語言，所以不像是 CSS 較無編寫上的規範，比如說在宣告變數後在程式碼結束沒有加上 ; 分號的話，會出現編譯錯誤又或者是在變數宣告前就先使用變數，因為 SassScript 是由上往下編譯，所以這樣做的話就會導致編譯器找不到該變數，而出現編譯錯誤。</p><h1 id="SassScript-的數字、字串以及顏色型別"><a href="#SassScript-的數字、字串以及顏色型別" class="headerlink" title="SassScript 的數字、字串以及顏色型別"></a>SassScript 的數字、字串以及顏色型別</h1><h2 id="數字型別"><a href="#數字型別" class="headerlink" title="數字型別"></a>數字型別</h2><p>  在數字型別中我們可以單純的輸入數字，也可以輸入帶單位的數字 (px, rem, em) 這些在 SassScript 中都可以被編譯，而這個型別方便的是數字可以進行加減乘除。</p><p>  如果以網站的字型大小為例，我們可以預設一個字型大小基礎值，之後都是使用乘法來控制字體大小</p>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$font-base</span>: <span class="number">16px</span>;</span><br><span class="line"><span class="variable">$font-lg</span>: font-base * <span class="number">1.25</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$font-lg</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  編譯成 CSS 的程式碼如下</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.header</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  而且由於 Sass 不會將宣告變數的程式碼編譯進 CSS 所以可以減少 CSS 的程式碼數量</p><h2 id="字串型別"><a href="#字串型別" class="headerlink" title="字串型別"></a>字串型別</h2><p>  只要在變數的值前後加上 <code>&#39; &#39;</code>, <code>&quot; &quot;</code> 就變被認定為字串型別，字串型別通常會用在字型或是跑環圈的時候</p><h2 id="顏色型別"><a href="#顏色型別" class="headerlink" title="顏色型別"></a>顏色型別</h2><p>  文章開頭已經以顏色示範過如何宣告變數，這邊需要特別提到的是 SassScript 內建的函式，我們可以此函式來產生出相近色，函式示範如下<br>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$base-color</span>: red;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$base-color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: darken(<span class="variable">$base-color</span>,<span class="number">40%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box3</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background</span>: lighten(<span class="variable">$base-color</span>,<span class="number">30%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  我們可以看到 <code>.box2</code>, <code>.box3</code> 這兩個選擇器下面使用了 <code>darken</code>, <code>lighten</code> 這兩個函式，這兩個函式是什麼意思呢？就是說以 <code>$base-color</code> 這個顏色變數來進行增加亮度(lighten)或是減少亮度(darken)，而函式的第二個值就是指定要調整的數值，我們可以看編譯出來的程式碼</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#330000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff9999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  我們可以看到 <code>.box2</code>, <code>.box3</code> 帶入的顏色並不是 red 而是調整過後的數值。</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p>  <a href="https://courses.hexschool.com/courses/enrolled/670032">六角學院-Sass 實戰全攻略 - 成為前 1% 的 CSS 頂尖好手</a><br>  <a href="https://zh.wikipedia.org/zh-tw/%E5%8F%98%E9%87%8F_(%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)">變數 wiki</a><br>  <a href="https://awdr74100.github.io/2020-05-25-scss-variables/">Sass &#x2F; SCSS 預處理器 - Variables 變數宣告與 !global、!default 標誌定義</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;變數是什麼？&quot;&gt;&lt;a href=&quot;#變數是什麼？&quot; class=&quot;headerlink&quot; title=&quot;變數是什麼？&quot;&gt;&lt;/a&gt;變數是什麼？&lt;/h1&gt;&lt;p&gt;  比如說我們今天要賣麵包，然後一個麵包麵包 20 塊在現實世界我們可以用人腦進行計算，一個 20 兩個 40 ，十五個 300 塊，但是今天如果進入了數位的世界我們想要請電腦計算麵包的價格，難道我們要一次一次的打方程式嗎？ 1 * 20 ， 2 * 20 ， 15 * 20 ? 假設未來通貨膨脹麵包一個 25 塊怎麼辦？我們又要一次一次的計算嗎？這不符合工程師的性格，我們需要電腦儲存資訊讓我們重複利用且未來可以進行修改，而這個功能就是變數  &lt;/p&gt;</summary>
    
    
    
    
    <category term="Sass" scheme="http://blog.kevinhes.art/tags/Sass/"/>
    
    <category term="CSS" scheme="http://blog.kevinhes.art/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>在本機安裝 Sass 編譯器</title>
    <link href="http://blog.kevinhes.art/2022/06/07/%E5%9C%A8%E6%9C%AC%E6%A9%9F%E5%AE%89%E8%A3%9D%20Sass%20%E7%B7%A8%E8%AD%AF%E5%99%A8/"/>
    <id>http://blog.kevinhes.art/2022/06/07/%E5%9C%A8%E6%9C%AC%E6%A9%9F%E5%AE%89%E8%A3%9D%20Sass%20%E7%B7%A8%E8%AD%AF%E5%99%A8/</id>
    <published>2022-06-07T09:08:14.000Z</published>
    <updated>2022-06-09T06:41:43.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在本機使用-Sass"><a href="#如何在本機使用-Sass" class="headerlink" title="如何在本機使用 Sass?"></a>如何在本機使用 Sass?</h1><p>  我個人使用的方式就是使用 VS code 的插件，live Sass compiler 的方式來進行編譯，我們可以在 VS code 的 Marketplace 裡面找到下面的插件<br>  <a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.live-sass">Live Sass Compiler</a></p>  <img src="https://firebasestorage.googleapis.com/v0/b/bigsisblog-62bed.appspot.com/o/%E6%88%AA%E5%9C%96%202022-06-07%20%E4%B8%8B%E5%8D%888.11.37.png?alt=media&token=925ebfda-490c-4682-a170-5ace3ea5cba0" style="width:100%">  <span id="more"></span><p>  Live Sass Compiler 使用上也非常容易，安裝好之後我們可以在專案資料夾中新建一個 Sass 檔案，不論是 Sass 或是 SCSS 都可以，當專案資料夾裡面有 Sass 檔時系統就會自動偵測到接下來我們就會看到 VS code 的下方功能欄出現 Watch Sass 的字樣，按下去它就自動編譯了</p><p>  <img src="https://firebasestorage.googleapis.com/v0/b/bigsisblog-62bed.appspot.com/o/sass%2F%E6%88%AA%E5%9C%96%202022-06-07%20%E4%B8%8B%E5%8D%888.43.14.png?alt=media&token=00fe9afe-304f-4fa3-92d3-205493f7e1d3" alt="img"></p><p>  不過如果在沒有修改設定的情況下 Live Sass Compiler 會在 Sass 檔的同一層資料夾中自動生成 CSS 檔以及一個 css.map 的檔案，如果要指定資料夾的話可以依照下列步驟來設定</p><ol><li>進入 Live Sass Compiler 設定檔</li></ol>  <img src="https://firebasestorage.googleapis.com/v0/b/bigsisblog-62bed.appspot.com/o/sass%2F%E6%88%AA%E5%9C%96%202022-06-07%20%E4%B8%8B%E5%8D%889.06.57.png?alt=media&token=30cdc6ef-c81a-438f-8e8f-36a489072d98" style="width:100%">  <img src="https://firebasestorage.googleapis.com/v0/b/bigsisblog-62bed.appspot.com/o/sass%2F%E6%88%AA%E5%9C%96%202022-06-07%20%E4%B8%8B%E5%8D%889.07.10.png?alt=media&token=85fb4277-243f-4fb9-857d-aa8c667622d9" style="width:100%"><ol start="2"><li>並在 settings.json 檔中輸入以下程式碼</li></ol>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;liveSassCompile.settings.formats&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;expanded&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extensionName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.css&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;savePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/assets/style/css&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>  最重要的就是 <code>&quot;savePath&quot;</code> 後面字串的位置，那是 CSS 檔的生成位置，如果像案例裡面有把 CSS 檔案巢狀的放在資料夾內的狀況，當你資料夾還沒有建立的時候它會幫你自動生成，十分方便。</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p>  <a href="https://courses.hexschool.com/courses/enrolled/670032">六角學院-Sass 實戰全攻略 - 成為前 1% 的 CSS 頂尖好手</a><br>  <a href="https://awdr74100.github.io/2020-05-18-scss-install/">Roya Sass &#x2F; SCSS 預處理器 - 基本介紹與編譯環境建立</a> </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;如何在本機使用-Sass&quot;&gt;&lt;a href=&quot;#如何在本機使用-Sass&quot; class=&quot;headerlink&quot; title=&quot;如何在本機使用 Sass?&quot;&gt;&lt;/a&gt;如何在本機使用 Sass?&lt;/h1&gt;&lt;p&gt;  我個人使用的方式就是使用 VS code 的插件，live Sass compiler 的方式來進行編譯，我們可以在 VS code 的 Marketplace 裡面找到下面的插件&lt;br&gt;  &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ritwickdey.live-sass&quot;&gt;Live Sass Compiler&lt;/a&gt;&lt;/p&gt;
  &lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/bigsisblog-62bed.appspot.com/o/%E6%88%AA%E5%9C%96%202022-06-07%20%E4%B8%8B%E5%8D%888.11.37.png?alt=media&amp;token=925ebfda-490c-4682-a170-5ace3ea5cba0&quot; style=&quot;width:100%&quot;&gt;</summary>
    
    
    
    
    <category term="Sass" scheme="http://blog.kevinhes.art/tags/Sass/"/>
    
    <category term="CSS" scheme="http://blog.kevinhes.art/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Sass 是什麼？</title>
    <link href="http://blog.kevinhes.art/2022/06/03/Sass%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F/"/>
    <id>http://blog.kevinhes.art/2022/06/03/Sass%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F/</id>
    <published>2022-06-03T05:15:53.000Z</published>
    <updated>2022-06-09T06:42:06.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="為什麼我們要學習預處理器"><a href="#為什麼我們要學習預處理器" class="headerlink" title="為什麼我們要學習預處理器?"></a>為什麼我們要學習預處理器?</h1><p>  我們都知道網頁是由 HTML, CSS, JavaScript 所組成的，那隨著網頁功能日趨複雜，程式碼開始變得越來越長，而其帶來的後果就是程式碼難以修改及維護，增加了工作的時間也降低了工作的效率，而預處理器就是為了讓我我們可以更加快速並準確的編輯程式碼而誕生一種編譯器以及語言。</p><p>  懶惰是人類的天性也是發明的動力，尤其是工程師這個族群更是如此，秉持著可以用一行程式碼解決的事情就不要用到兩行精神，工程師們想要將預處理器設計成可以用少量的程式碼編譯成瀏覽器可閱讀的檔案，並且希望這個預處理器使用的檔案以及語言可以達到模組化、重複利用並且容易閱讀這幾個特性，讓工程師不會在茫茫的程式海中迷失自我而去詢問我是誰？我在哪？</p><span id="more"></span><h1 id="什麼是-Sass"><a href="#什麼是-Sass" class="headerlink" title="什麼是 Sass ?"></a>什麼是 Sass ?</h1><p>  Sass 是 CSS 的預處理器，他可以做到模組化、自訂變數、陣列處理以及自訂函式等等的功能，並且可以把 CSS 的語法巢狀化，讓我們使用 CSS 選擇器的時候不用再 <code>.list li a &#123;&#125;</code> 這樣來撰寫，對於 CSS 程式碼而言這可以說是大幅的增加了程式碼的可讀性。</p><p>  目前 Sass 提供了兩種語法，一個人如其名的 Sass 另一個則是比較接近 CSS 語法的 SCSS，其分別是 Sass 是使用縮排來達成巢狀結構，而 SCSS 是由大括號 {} ，而由於目前 SCSS 屬於主流的語法，所以往後相關的文章我們都使用 SCSS 來做程式碼的示範</p><h1 id="SCSS-的程式碼怎麼寫？"><a href="#SCSS-的程式碼怎麼寫？" class="headerlink" title="SCSS 的程式碼怎麼寫？"></a>SCSS 的程式碼怎麼寫？</h1><p>  基本上與 CSS 是完全相同，今天如果使用 CSS 的方式撰寫 SCSS 的話預處理也是會接受並且編譯，那既然如此那 CSS 跟 SCSS 到底有什麼不同？最大的不同就是可以使用巢狀結構來撰寫在 CSS 中如果我們要寫下列的程式碼<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.navbar</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.navbar</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav-list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav-list</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  在 SCSS 裏面我們可以改寫成這個樣子<br>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.navbar</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav-list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  所以我們就可以利用這個特性，來大幅的增加程式碼的可讀性不用像在 CSS 撰寫的時候有著一堆又臭又長的子選擇器</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p>  <a href="https://courses.hexschool.com/courses/enrolled/670032">六角學院-Sass 實戰全攻略 - 成為前 1% 的 CSS 頂尖好手</a><br>  <a href="https://zh.wikipedia.org/zh-tw/Sass">Sass wiki</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;為什麼我們要學習預處理器&quot;&gt;&lt;a href=&quot;#為什麼我們要學習預處理器&quot; class=&quot;headerlink&quot; title=&quot;為什麼我們要學習預處理器?&quot;&gt;&lt;/a&gt;為什麼我們要學習預處理器?&lt;/h1&gt;&lt;p&gt;  我們都知道網頁是由 HTML, CSS, JavaScript 所組成的，那隨著網頁功能日趨複雜，程式碼開始變得越來越長，而其帶來的後果就是程式碼難以修改及維護，增加了工作的時間也降低了工作的效率，而預處理器就是為了讓我我們可以更加快速並準確的編輯程式碼而誕生一種編譯器以及語言。&lt;/p&gt;
&lt;p&gt;  懶惰是人類的天性也是發明的動力，尤其是工程師這個族群更是如此，秉持著可以用一行程式碼解決的事情就不要用到兩行精神，工程師們想要將預處理器設計成可以用少量的程式碼編譯成瀏覽器可閱讀的檔案，並且希望這個預處理器使用的檔案以及語言可以達到模組化、重複利用並且容易閱讀這幾個特性，讓工程師不會在茫茫的程式海中迷失自我而去詢問我是誰？我在哪？&lt;/p&gt;</summary>
    
    
    
    
    <category term="Sass" scheme="http://blog.kevinhes.art/tags/Sass/"/>
    
    <category term="CSS" scheme="http://blog.kevinhes.art/tags/CSS/"/>
    
  </entry>
  
</feed>
